export class NoteUtils {
  static insertSummary(content: string, summary: string): string {
    const timestamp = new Date().toLocaleString();
    const summaryBlock = `# Summary\n\n## Generated by AI\n\n*Generated on ${timestamp}*\n\n${summary}\n\n---\n\n# Original Article\n\n`;
    
    // Find if there are existing summaries
    const summaryRegex = /^# Summary\s*\n/m;
    const match = content.match(summaryRegex);
    
    if (match) {
      // Find the end of the existing summary section
      const summaryStart = match.index!;
      const afterSummaryMatch = content.slice(summaryStart).match(/\n(?=# [^#])/);
      
      if (afterSummaryMatch) {
        // Insert new summary before the next main heading
        const insertPosition = summaryStart + afterSummaryMatch.index!;
        const newSummaryBlock = `## Generated by AI\n\n*Generated on ${timestamp}*\n\n${summary}\n\n---\n\n# Original Article\n\n`;
        return content.slice(0, insertPosition) + newSummaryBlock + content.slice(insertPosition);
      } else {
        // No other main headings found, append to end of summary section
        const newSummaryBlock = `## Generated by AI\n\n*Generated on ${timestamp}*\n\n${summary}\n\n`;
        return content + newSummaryBlock;
      }
    } else {
      // No existing summary, add at the beginning
      return summaryBlock + content;
    }
  }

  static extractContentForSummary(content: string): string {
    // Remove existing summaries from content before sending to AI
    const summaryRegex = /^# Summary\s*\n.*?(?=\n# [^#]|\n$|$)/ms;
    const cleanContent = content.replace(summaryRegex, '').trim();
    
    // Remove excessive whitespace
    return cleanContent.replace(/\n{3,}/g, '\n\n');
  }

  static validateContent(content: string): { isValid: boolean; reason?: string } {
    if (!content || content.trim().length === 0) {
      return { isValid: false, reason: 'Note is empty' };
    }

    if (content.trim().length < 50) {
      return { isValid: false, reason: 'Note is too short to summarize (minimum 50 characters)' };
    }

    // Check if content is mostly just summaries
    const summaryRegex = /^# Summary\s*\n.*?(?=\n# [^#]|\n$|$)/ms;
    const contentWithoutSummaries = content.replace(summaryRegex, '').trim();
    
    if (contentWithoutSummaries.length < 50) {
      return { isValid: false, reason: 'Note contains only summaries or insufficient content' };
    }

    return { isValid: true };
  }

  static truncateForAI(content: string, maxLength: number = 8000): string {
    if (content.length <= maxLength) {
      return content;
    }

    // Truncate and add notice
    const truncated = content.substring(0, maxLength - 100);
    return truncated + '\n\n[Note: Content truncated for processing]';
  }
}
